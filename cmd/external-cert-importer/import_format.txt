# Format of Certificate Data for Import by Let's Encrypt
There are three CSV files:
* A `domains` CSV file, which maps the SHA1 fingerprint of a certificate to the domain which the certificate applies to (as read from the Subject field and the Subject Alternative Name field of the given certificate). Note that any given domain may appear in multiple rows in this file (if there are multiple certificates for this domain). Similarly, any given fingerprint may appear in multiple rows (if a certificate applies to multiple domains, i.e. via the SAN field). However, the combination of domain and fingerprint constitutes a unique entry, and no two rows should have the same domain *and* fingerprint.
* A `valid-certs` CSV file, which contains all the details (other than the domain) of a given certificate. Each row in the table represents one certificate (but as mentioned above, may map to multiple domains via the `domains` file).
* An `invalid-certs` CSV file, which is identical in format to the `valid-certs` CSV file, but whose rows represent certificates that are no longer valid (due to expiration, revocation, etc.).

For the purposes of importing by the Let's Encrypt system, these tables will be provided as CSV files. Each entry in the CSV file will be enclosed by double quotes (") and interior double quotes will be backslash-escaped (\"). The columns will be as follows (in the order listed).

## Table Formats

###`domains`
1. Column Name: SHA1 Fingerprint  
Data Type: 40 hexadecimal characters  
Description: The SHA1 fingerprint of the DER-encoded certificate, in hexadecimal, without colons separating bytes.  
Example: `"10A9C1F8ADAACBFE2B0F83F7D5FA1FC293A8D2A2"`
1. Column Name: Domain  
Data Type: Up to 255 characters
Description: The domain to which the certificate applies, with the DNS labels reversed. Wildcards are included.  
Example: `"org.eff.*"`

###`valid-certs`
1. Column Name: SHA1 Fingerprint  
Data Type: 40 hexadecimal characters  
Description: The SHA1 fingerprint of the DER-encoded certificate, in hexadecimal, without colons separating bytes. Matches the SHA1 Fingerprint column in the `domains_to_fingerprints` table.  
Example: `"10A9C1F8ADAACBFE2B0F83F7D5FA1FC293A8D2A2"`
1. Column Name: Issuer  
Data Type: Text  
Description: The Issuer field for the certificate this row represents.  
Example: `"C=IL, O=StartCom Ltd., OU=Secure Digital Certificate Signing, CN=StartCom Class 2 Primary Intermediate Server CA"`  
1. Column Name: Subject  
Data Type: Text  
Description: The Subject field for the certificate this row represents.  
Example: `"description=571208-SLe257oHY9fVQ07Z, C=US, ST=California, L=San Francisco, O=Electronic Frontier Foundation, Inc., CN=*.eff.org/emailAddress=hostmaster@eff.org"`  
1. Column Name: Not Valid After Datetime  
Data Type: A MySQL `DATETIME`, 19 characters long. (More information is available at https://dev.mysql.com/doc/refman/5.5/en/datetime.html)  
Description: The UTC expiration date/time (not valid after date/time) for the certificate this row represents.  
Example: `"2016-04-14 23:42:01"`  
1. Column Name: Modulus (Public Key)  
Data Type: Hexadecimal characters  
Description: The public key for the certificate this row represents (hexadecimal characters only, no colons).  
Example: `"EA402791CB7E2721CAC9EB916BC2FFA5C3D3AEB9EA1B0A76AAE8594DACC091AA9E3942B89165DEF25C081380E4F963AC6FF84DC2433BC8C15D2FD618C23AC9CD1A6DEB5A069B275E4A9F0E4840B9C6ED9F82715472575EF966648ADFB5BA7491E2A2D1C4DA74769D84537E42BC8664C413F84AE2451A4564B1817930914E0EFBB19BA76512A29F2A5E72B6C96B8AFD74CBEE6072E7969836540BECD286A1295DBE91803DB6AE87A193320E8787E18D4473D37FB153D1E0299CEFC7BC9E6CC2E1790B3516867B549EB30A5ECE36B715D3C949E3DFA33DD6A8D351898611459259BA5E25C8CB5CFBB2868C39FD1467C5096497690B962243E863D0391CFBCDAE99"`  
1. Column Name: Valid?  
Data Type: 0 or 1  
Description: 0 if the certificate is no longer valid (due to expiration or revocation), and 1 if the certificate is still valid (as determined via the method described below in the section *Certificate Validity*).  
Example: 1  
1. Column Name: EV?  
Data Type: 0 or 1  
Description: 1 if the certificate is a valid Extended Validation (EV) certificate (as determined via the method described below in the section *EV Validity*), and 0 otherwise.  
Example: 0  
1. Column Name: Hex-Encoded Certificate
Data Type: Hexadecimal characters
Description: The hexadecimal encoding of the DER-encoded certificate.
Example: 
``


###`invalid-certs`
Same format as the `valid-certs` CSV file.

## Certificate Validity
A certificate is considered valid if the following `openssl` command reports the certificate is valid:

    openssl verify -CApath root_cas -crl_check -untrusted intermediate_ca_certs certificate.pem

where
* `root_cas` is a directory containing the transitive closure of all valid CA certificates contained in the data source, starting with the union of the root CA certificates included with Mozilla Firefox and Microsoft Windows,
* `intermediate_ca_certs` is a file containing all the intermediate CAs the data source has seen in chains connected to the certificate in question, and,
* `certificate.pem` is the certificate in question in PEM format.

## EV Validity
A certificate is considered a valid Extended Validation certificate if it is valid as described in *Certificate Validity* and all of the following are true:
* An OID is given in the *Certificate Policies* X.509 extension field,
* The root certificate in one of the valid chains that end with this certificate is also in Mozilla's list of EV CAs (which can be found at https://mxr.mozilla.org/mozilla-central/source/security/certverifier/ExtendedValidation.cpp), and
* The OID associated with that root certificate and the OID given by the certificate in question are identical.
