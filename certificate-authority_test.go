// Copyright 2014 ISRG.  All rights reserved
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

package boulder

import (
	"crypto/x509"
	"encoding/hex"
	"testing"

	_ "github.com/mattn/go-sqlite3"
)

// CSR generated by Go:
// * Random public key
// * CN = example.com
// * DNSNames = example.com, www.example.com
var CSR_HEX = "308202953082017d0201003016311430120603" +
	"550403130b6578616d706c652e636f6d30820122300d06092a864886f70d0101010500038201" +
	"0f003082010a0282010100baaf16e891828470cad87b849a73356f65e20ad3699fd5583a7200" +
	"e924512d9eeb1dbe16441ad7bd804fa2e5726a06f0af5279012fe6354a5677259f5591984aa9" +
	"99b8ea3ea10fbd5ecfa30e5f563b41c419374decfc98ea62c611046ad011c326470a2426f46d" +
	"be6cc44fae3b247e19710810585f9f3ad7f64b2f305aebb72e2829866f89b20b03a300b7ff5f" +
	"4e6204f41420d9fa731252692cee8e616636723abe8a7053fd86e2673190fa8b618ada5bc735" +
	"ba57a145af86904a8f55a288d4d6ba9e501530f23f197f5b623443193fc92b7f87d6abbf740d" +
	"9fc92800c7e0e1484d5eec6ffae1007c139c1ec19d67e749743fe8d8396fe190cfbcf2f90e05" +
	"230203010001a03a303806092a864886f70d01090e312b302930270603551d110420301e820b" +
	"6578616d706c652e636f6d820f7777772e6578616d706c652e636f6d300d06092a864886f70d" +
	"01010b05000382010100514c622dc866b31c86777a26e9b2911618ce5b188591f08007b42772" +
	"3497b733676a7d493c434fc819b8089869442fd299aa99ff7f7b9df881843727f0c8b89ca62a" +
	"f8a12b38c963e9210148c4e1c0fc964aef2605f88ed777e6497d2e43e9a9713835d1ae96260c" +
	"ca826c34c7ae52c77f5d8468643ee1936eadf04e1ebf8bbbb68b0ec7d0ef694432451292e4a3" +
	"1989fd8339c07e01e04b6dd3834872b828d3f5b2b4dadda0596396e15fbdf446998066a74873" +
	"2baf53f3f7ebb849e83cf734753c35ab454d1b62e1741a6514c5c575c0c805b4d668fcf71746" +
	"ef32017613a52d6b807e2977f4fbc0a88b2e263347c4d9e35435333cf4f8288be53df41228ec"

func TestIssueCertificate(t *testing.T) {
	// Decode pre-generated CSR
	csrDER, _ := hex.DecodeString(CSR_HEX)
	csr, _ := x509.ParseCertificateRequest(csrDER)

	// Create an SA
	sa, err := NewSQLStorageAuthority("sqlite3", ":memory:")
	AssertNotError(t, err, "Failed to create SA")
	sa.InitTables()

	// Create a CA
	// This assumes that there is a CFSSL instance running that supports these parameters
	ca, err := NewCertificateAuthorityImpl("localhost:9000", "79999d86250c367a2b517a1ae7d409c1", "ee")
	AssertNotError(t, err, "Failed to create CA")
	ca.SA = sa

	// Sign CSR
	certID, certDER, err := ca.IssueCertificate(*csr)
	AssertNotError(t, err, "Failed to sign certificate")

	// Verify cert contents
	cert, err := x509.ParseCertificate(certDER)
	AssertNotError(t, err, "Certificate failed to parse")

	AssertEquals(t, cert.Subject.CommonName, "example.com")

	if len(cert.DNSNames) != 2 || cert.DNSNames[0] != "example.com" || cert.DNSNames[1] != "www.example.com" {
		t.Errorf("Improper list of domain names %v", cert.DNSNames)
	}

	// Verify that the cert got stored in the DB
	_, err = sa.GetCertificate(certID)
	AssertNotError(t, err, "Certificate not found in database")
}
