--- va/validation-authority.go
+++ va/validation-authority.go
@@ -229,12 +228,34 @@ func (va ValidationAuthorityImpl) validateDvsni(identifier core.AcmeIdentifier,
 	zName := fmt.Sprintf("%064x.acme.invalid", z)
 
 	// Make a connection with SNI = nonceName
-	hostPort := identifier.Value + ":443"
-	if va.TestMode {
-		hostPort = "localhost:5001"
+	host, port, err := net.SplitHostPort(identifier.Value)
+	if err != nil {
+		if aerr, ok := err.(*net.AddrError); ok && aerr.Err == "missing port in address" {
+			host = identifier.Value
+			port = "443"
+		} else {
+			return challenge, err
+		}
 	}
 	va.log.Notice(fmt.Sprintf("DVSNI [%s] Attempting to validate DVSNI for %s %s",
-		identifier, hostPort, zName))
+		identifier, identifier.Value, zName))
+	fmt.Fprintf(os.Stderr, "va uh %#v %#v\n", host, identifier.Value)
+	ips, _, _, err := va.DNSResolver.LookupHost(host)
+	// FIXME i'm assuming ips has at least one address if err is nil
+	if err != nil {
+		challenge.Status = core.StatusInvalid
+		challenge.Error = &core.ProblemDetails{
+			Type:   parseHTTPConnError(err),
+			Detail: "Failed to resolve host for DVSNI challenge",
+		}
+		va.log.Debug(fmt.Sprintf("DVSNI [%s] DNS connection failure: %s", identifier, err))
+		return challenge, err
+	}
+
+	hostPort := ips[0].String()
+	if port != "" {
+		hostPort = net.JoinHostPort(hostPort, port)
+	}
 	conn, err := tls.DialWithDialer(&net.Dialer{Timeout: 5 * time.Second}, "tcp", hostPort, &tls.Config{
 		ServerName:         nonceName,
 		InsecureSkipVerify: true,
