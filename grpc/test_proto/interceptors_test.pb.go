// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/test_proto/interceptors_test.proto

package test_proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Time struct {
	Time                 *int64   `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Time) Reset()         { *m = Time{} }
func (m *Time) String() string { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()    {}
func (*Time) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e88cbda9fef6d38, []int{0}
}

func (m *Time) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Time.Unmarshal(m, b)
}
func (m *Time) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Time.Marshal(b, m, deterministic)
}
func (m *Time) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Time.Merge(m, src)
}
func (m *Time) XXX_Size() int {
	return xxx_messageInfo_Time.Size(m)
}
func (m *Time) XXX_DiscardUnknown() {
	xxx_messageInfo_Time.DiscardUnknown(m)
}

var xxx_messageInfo_Time proto.InternalMessageInfo

func (m *Time) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func init() {
	proto.RegisterType((*Time)(nil), "Time")
}

func init() {
	proto.RegisterFile("grpc/test_proto/interceptors_test.proto", fileDescriptor_8e88cbda9fef6d38)
}

var fileDescriptor_8e88cbda9fef6d38 = []byte{
	// 117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4f, 0x2f, 0x2a, 0x48,
	0xd6, 0x2f, 0x49, 0x2d, 0x2e, 0x89, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0xcc, 0x2b, 0x49,
	0x2d, 0x4a, 0x4e, 0x2d, 0x28, 0xc9, 0x2f, 0x2a, 0x8e, 0x07, 0x89, 0xeb, 0x81, 0xc5, 0x95, 0xa4,
	0xb8, 0x58, 0x42, 0x32, 0x73, 0x53, 0x85, 0x84, 0xb8, 0x58, 0x4a, 0x32, 0x73, 0x53, 0x25, 0x18,
	0x15, 0x18, 0x35, 0x98, 0x83, 0xc0, 0x6c, 0x23, 0x25, 0x2e, 0x76, 0xe7, 0x8c, 0xcc, 0x9c, 0x9c,
	0xd4, 0x22, 0x21, 0x71, 0x2e, 0x56, 0x30, 0x53, 0x88, 0x55, 0x0f, 0xa4, 0x5c, 0x0a, 0x42, 0x29,
	0x31, 0x38, 0xf1, 0x44, 0x71, 0x21, 0x6c, 0x01, 0x04, 0x00, 0x00, 0xff, 0xff, 0x56, 0xd9, 0xf5,
	0x39, 0x77, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChillerClient is the client API for Chiller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChillerClient interface {
	// Sleep for the given amount of time, and return the amount of time slept.
	Chill(ctx context.Context, in *Time, opts ...grpc.CallOption) (*Time, error)
}

type chillerClient struct {
	cc *grpc.ClientConn
}

func NewChillerClient(cc *grpc.ClientConn) ChillerClient {
	return &chillerClient{cc}
}

func (c *chillerClient) Chill(ctx context.Context, in *Time, opts ...grpc.CallOption) (*Time, error) {
	out := new(Time)
	err := c.cc.Invoke(ctx, "/Chiller/Chill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChillerServer is the server API for Chiller service.
type ChillerServer interface {
	// Sleep for the given amount of time, and return the amount of time slept.
	Chill(context.Context, *Time) (*Time, error)
}

// UnimplementedChillerServer can be embedded to have forward compatible implementations.
type UnimplementedChillerServer struct {
}

func (*UnimplementedChillerServer) Chill(ctx context.Context, req *Time) (*Time, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chill not implemented")
}

func RegisterChillerServer(s *grpc.Server, srv ChillerServer) {
	s.RegisterService(&_Chiller_serviceDesc, srv)
}

func _Chiller_Chill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Time)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChillerServer).Chill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chiller/Chill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChillerServer).Chill(ctx, req.(*Time))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chiller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Chiller",
	HandlerType: (*ChillerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chill",
			Handler:    _Chiller_Chill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/test_proto/interceptors_test.proto",
}
