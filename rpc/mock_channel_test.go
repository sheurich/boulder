// Automatically generated by MockGen. DO NOT EDIT!
// Source: rpc/amqp-rpc-connection.go

package rpc

import (
	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
)

// Mock of amqpChannel interface
type MockamqpChannel struct {
	ctrl     *gomock.Controller
	recorder *_MockamqpChannelRecorder
}

// Recorder for MockamqpChannel (not exported)
type _MockamqpChannelRecorder struct {
	mock *MockamqpChannel
}

func NewMockamqpChannel(ctrl *gomock.Controller) *MockamqpChannel {
	mock := &MockamqpChannel{ctrl: ctrl}
	mock.recorder = &_MockamqpChannelRecorder{mock}
	return mock
}

func (_m *MockamqpChannel) EXPECT() *_MockamqpChannelRecorder {
	return _m.recorder
}

func (_m *MockamqpChannel) Cancel(consumer string, noWait bool) error {
	ret := _m.ctrl.Call(_m, "Cancel", consumer, noWait)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockamqpChannelRecorder) Cancel(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Cancel", arg0, arg1)
}

func (_m *MockamqpChannel) Consume(queue string, consumer string, autoAck bool, exclusive bool, noLocal bool, noWait bool, args amqp.Table) (<-chan amqp.Delivery, error) {
	ret := _m.ctrl.Call(_m, "Consume", queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockamqpChannelRecorder) Consume(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Consume", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func (_m *MockamqpChannel) NotifyClose(c chan *amqp.Error) chan *amqp.Error {
	ret := _m.ctrl.Call(_m, "NotifyClose", c)
	ret0, _ := ret[0].(chan *amqp.Error)
	return ret0
}

func (_mr *_MockamqpChannelRecorder) NotifyClose(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyClose", arg0)
}

func (_m *MockamqpChannel) Publish(exchange string, key string, mandatory bool, immediate bool, msg amqp.Publishing) error {
	ret := _m.ctrl.Call(_m, "Publish", exchange, key, mandatory, immediate, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockamqpChannelRecorder) Publish(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Publish", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockamqpChannel) QueueBind(name string, key string, exchange string, noWait bool, args amqp.Table) error {
	ret := _m.ctrl.Call(_m, "QueueBind", name, key, exchange, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockamqpChannelRecorder) QueueBind(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueBind", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockamqpChannel) QueueDeclare(name string, durable bool, autoDelete bool, exclusive bool, noWait bool, args amqp.Table) (amqp.Queue, error) {
	ret := _m.ctrl.Call(_m, "QueueDeclare", name, durable, autoDelete, exclusive, noWait, args)
	ret0, _ := ret[0].(amqp.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockamqpChannelRecorder) QueueDeclare(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueDeclare", arg0, arg1, arg2, arg3, arg4, arg5)
}
