apiVersion: apps/v1
kind: Deployment
metadata:
  name: boulder
  namespace: boulder
  labels:
    app: boulder
    app.kubernetes.io/name: boulder
    app.kubernetes.io/component: acme-ca
    app.kubernetes.io/part-of: boulder
spec:
  replicas: 1
  selector:
    matchLabels:
      app: boulder
  template:
    metadata:
      labels:
        app: boulder
        network: internal
    spec:
      serviceAccountName: boulder-service-account
      hostAliases:
      - ip: "127.0.0.1"
        hostnames:
        - "ca.example.org"
        - "integration.trust"
      containers:
      - name: boulder
        image: letsencrypt/boulder-tools:latest
        imagePullPolicy: Always
        env:
        - name: FAKE_DNS
          value: "127.0.0.1"
        - name: BOULDER_CONFIG_DIR
          value: "/boulder/test/config"
        - name: GOCACHE
          value: "/tmp/go-build"
        - name: GOMODCACHE
          value: "/tmp/go-mod"
        - name: BOULDER_MYSQL_HOST
          value: "boulder-proxysql"
        - name: BOULDER_MYSQL_PORT
          value: "6033"
        - name: BOULDER_REDIS_1
          value: "boulder-redis-1-0.boulder-redis-1.boulder.svc.cluster.local:4218"
        - name: BOULDER_REDIS_2
          value: "boulder-redis-2-0.boulder-redis-2.boulder.svc.cluster.local:4218"
        - name: BOULDER_CONSUL
          value: "boulder-consul-0.boulder-consul.boulder.svc.cluster.local"
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Starting Boulder services..."
          cd /boulder
          exec ./start.py
        ports:
        - containerPort: 4001
          name: wfe2
        - containerPort: 4003
          name: sfe
        - containerPort: 8003
          name: sa-debug
        - containerPort: 8004
          name: va-debug
        - containerPort: 8001
          name: ca-debug
        - containerPort: 8002
          name: ra-debug
        volumeMounts:
        - name: boulder-config
          mountPath: /boulder/test/config
        - name: boulder-certs
          mountPath: /boulder/test/certs
        - name: boulder-secrets
          mountPath: /boulder/test/secrets
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        readinessProbe:
          httpGet:
            path: /directory
            port: 4001
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /directory
            port: 4001
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      initContainers:
      - name: bsetup
        image: letsencrypt/boulder-tools:latest
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Generating test certificates..."
          cd /boulder
          ./test/certs/generate.sh
          echo "Certificates generated successfully"
        volumeMounts:
        - name: boulder-certs
          mountPath: /boulder/test/certs
      - name: wait-for-dependencies
        image: busybox:1.36
        command:
        - sh
        - -c
        - |
          echo "Waiting for external dependencies..."
          echo "Checking MariaDB..."
          until nc -z boulder-mysql 3306; do
            echo "MariaDB not ready. Retrying in 2 seconds..."
            sleep 2
          done
          echo "MariaDB is ready!"

          echo "Checking ProxySQL..."
          until nc -z boulder-proxysql 6033; do
            echo "ProxySQL not ready. Retrying in 2 seconds..."
            sleep 2
          done
          echo "ProxySQL is ready!"

          echo "Checking Redis instances..."
          until nc -z boulder-redis-1-0.boulder-redis-1.boulder.svc.cluster.local 4218; do
            echo "Redis-1 not ready. Retrying in 2 seconds..."
            sleep 2
          done
          echo "Redis-1 is ready!"

          until nc -z boulder-redis-2-0.boulder-redis-2.boulder.svc.cluster.local 4218; do
            echo "Redis-2 not ready. Retrying in 2 seconds..."
            sleep 2
          done
          echo "Redis-2 is ready!"

          echo "Checking Consul..."
          until nc -z boulder-consul 8500; do
            echo "Consul not ready. Retrying in 2 seconds..."
            sleep 2
          done
          echo "Consul is ready!"

          echo "Checking Jaeger..."
          until nc -z boulder-jaeger 16686; do
            echo "Jaeger not ready. Retrying in 2 seconds..."
            sleep 2
          done
          echo "Jaeger is ready!"

          echo "Checking PKIMetal..."
          until nc -z boulder-pkimetal 80; do
            echo "PKIMetal not ready. Retrying in 2 seconds..."
            sleep 2
          done
          echo "PKIMetal is ready!"

          echo "All dependencies are ready!"
      volumes:
      - name: boulder-config
        configMap:
          name: boulder-config
      - name: boulder-certs
        emptyDir: {}
      - name: boulder-secrets
        secret:
          secretName: boulder-secrets
          optional: true
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"