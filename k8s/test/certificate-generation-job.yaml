---
apiVersion: batch/v1
kind: Job
metadata:
  name: boulder-cert-generation
  namespace: boulder-test
  labels:
    app: boulder-cert-generation
    app.kubernetes.io/name: bsetup
    app.kubernetes.io/component: certificate-generation
    app.kubernetes.io/part-of: boulder
spec:
  template:
    metadata:
      labels:
        app: boulder-cert-generation
    spec:
      restartPolicy: OnFailure
      containers:
      - name: cert-generation
        image: letsencrypt/boulder-tools:latest
        imagePullPolicy: Never
        command: ["/bin/bash", "-c"]
        args:
        - |
          set -e
          echo "Generating Boulder certificates..."

          # Generate certificates using Boulder's script
          cd /boulder
          ./test/certs/generate.sh

          echo "Creating Kubernetes secrets from generated certificates..."

          # Check if certificates were generated
          if [ ! -d "test/certs/ipki" ]; then
            echo "Error: Certificate generation failed - no ipki directory found"
            exit 1
          fi

          # Create redis-tls-certs secret
          kubectl create secret generic redis-tls-certs \
            --namespace=boulder-test \
            --from-file=tls.crt=test/certs/ipki/redis/cert.pem \
            --from-file=tls.key=test/certs/ipki/redis/key.pem \
            --dry-run=client -o yaml | kubectl apply -f -

          # Create boulder-ca-cert secret
          kubectl create secret generic boulder-ca-cert \
            --namespace=boulder-test \
            --from-file=ca.crt=test/certs/ipki/minica.pem \
            --dry-run=client -o yaml | kubectl apply -f -

          # Create consul-tls-certs secret
          kubectl create secret generic consul-tls-certs \
            --namespace=boulder-test \
            --from-file=tls.crt=test/certs/ipki/consul.boulder/cert.pem \
            --from-file=tls.key=test/certs/ipki/consul.boulder/key.pem \
            --dry-run=client -o yaml | kubectl apply -f -

          echo "Certificate secrets created successfully!"
        workingDir: /boulder
        volumeMounts:
        - name: boulder-source
          mountPath: /boulder
        env:
        - name: BOULDER_CONFIG_DIR
          value: "test/config"
      volumes:
      - name: boulder-source
        hostPath:
          path: /boulder-src
      serviceAccountName: boulder-cert-generator
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: boulder-cert-generator
  namespace: boulder-test
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: boulder-test
  name: boulder-cert-generator
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: boulder-cert-generator
  namespace: boulder-test
subjects:
- kind: ServiceAccount
  name: boulder-cert-generator
  namespace: boulder-test
roleRef:
  kind: Role
  name: boulder-cert-generator
  apiGroup: rbac.authorization.k8s.io
