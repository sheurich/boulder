// Code generated by protoc-gen-go.
// source: sa/proto/sa.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	sa/proto/sa.proto

It has these top-level messages:
	RegistrationID
	JSONWebKey
	AuthorizationID
	GetPendingAuthorizationRequest
	GetValidAuthorizationsRequest
	ValidAuthorizations
	CertificateStatus
	Serial
	Range
	Count
	CountCertificatesByNamesRequest
	CountByNames
	CountRegistrationsByIPRequest
	CountInvalidAuthorizationsRequest
	GetSCTReceiptRequest
	CountFQDNSetsRequest
	FQDNSetExistsRequest
	Exists
	MarkCertificateRevokedRequest
	AddCertificateRequest
	AddCertificateResponse
	SignedCertificateTimestamp
	RevokeAuthorizationsByDomainRequest
	RevokeAuthorizationsByDomainResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/letsencrypt/boulder/core/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type RegistrationID struct {
	Id               *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RegistrationID) Reset()                    { *m = RegistrationID{} }
func (m *RegistrationID) String() string            { return proto1.CompactTextString(m) }
func (*RegistrationID) ProtoMessage()               {}
func (*RegistrationID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegistrationID) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type JSONWebKey struct {
	Jwk              []byte `protobuf:"bytes,1,opt,name=jwk" json:"jwk,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *JSONWebKey) Reset()                    { *m = JSONWebKey{} }
func (m *JSONWebKey) String() string            { return proto1.CompactTextString(m) }
func (*JSONWebKey) ProtoMessage()               {}
func (*JSONWebKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JSONWebKey) GetJwk() []byte {
	if m != nil {
		return m.Jwk
	}
	return nil
}

type AuthorizationID struct {
	Id               *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AuthorizationID) Reset()                    { *m = AuthorizationID{} }
func (m *AuthorizationID) String() string            { return proto1.CompactTextString(m) }
func (*AuthorizationID) ProtoMessage()               {}
func (*AuthorizationID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AuthorizationID) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type GetPendingAuthorizationRequest struct {
	RegistrationID  *int64  `protobuf:"varint,1,opt,name=registrationID" json:"registrationID,omitempty"`
	IdentifierType  *string `protobuf:"bytes,2,opt,name=identifierType" json:"identifierType,omitempty"`
	IdentifierValue *string `protobuf:"bytes,3,opt,name=identifierValue" json:"identifierValue,omitempty"`
	// Result must be valid until at least this Unix timestamp (nanos)
	ValidUntil       *int64 `protobuf:"varint,4,opt,name=validUntil" json:"validUntil,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetPendingAuthorizationRequest) Reset()                    { *m = GetPendingAuthorizationRequest{} }
func (m *GetPendingAuthorizationRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetPendingAuthorizationRequest) ProtoMessage()               {}
func (*GetPendingAuthorizationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetPendingAuthorizationRequest) GetRegistrationID() int64 {
	if m != nil && m.RegistrationID != nil {
		return *m.RegistrationID
	}
	return 0
}

func (m *GetPendingAuthorizationRequest) GetIdentifierType() string {
	if m != nil && m.IdentifierType != nil {
		return *m.IdentifierType
	}
	return ""
}

func (m *GetPendingAuthorizationRequest) GetIdentifierValue() string {
	if m != nil && m.IdentifierValue != nil {
		return *m.IdentifierValue
	}
	return ""
}

func (m *GetPendingAuthorizationRequest) GetValidUntil() int64 {
	if m != nil && m.ValidUntil != nil {
		return *m.ValidUntil
	}
	return 0
}

type GetValidAuthorizationsRequest struct {
	RegistrationID   *int64   `protobuf:"varint,1,opt,name=registrationID" json:"registrationID,omitempty"`
	Domains          []string `protobuf:"bytes,2,rep,name=domains" json:"domains,omitempty"`
	Now              *int64   `protobuf:"varint,3,opt,name=now" json:"now,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GetValidAuthorizationsRequest) Reset()                    { *m = GetValidAuthorizationsRequest{} }
func (m *GetValidAuthorizationsRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetValidAuthorizationsRequest) ProtoMessage()               {}
func (*GetValidAuthorizationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetValidAuthorizationsRequest) GetRegistrationID() int64 {
	if m != nil && m.RegistrationID != nil {
		return *m.RegistrationID
	}
	return 0
}

func (m *GetValidAuthorizationsRequest) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetValidAuthorizationsRequest) GetNow() int64 {
	if m != nil && m.Now != nil {
		return *m.Now
	}
	return 0
}

type ValidAuthorizations struct {
	Valid            []*ValidAuthorizations_MapElement `protobuf:"bytes,1,rep,name=valid" json:"valid,omitempty"`
	XXX_unrecognized []byte                            `json:"-"`
}

func (m *ValidAuthorizations) Reset()                    { *m = ValidAuthorizations{} }
func (m *ValidAuthorizations) String() string            { return proto1.CompactTextString(m) }
func (*ValidAuthorizations) ProtoMessage()               {}
func (*ValidAuthorizations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ValidAuthorizations) GetValid() []*ValidAuthorizations_MapElement {
	if m != nil {
		return m.Valid
	}
	return nil
}

type ValidAuthorizations_MapElement struct {
	Domain           *string             `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Authz            *core.Authorization `protobuf:"bytes,2,opt,name=authz" json:"authz,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *ValidAuthorizations_MapElement) Reset()         { *m = ValidAuthorizations_MapElement{} }
func (m *ValidAuthorizations_MapElement) String() string { return proto1.CompactTextString(m) }
func (*ValidAuthorizations_MapElement) ProtoMessage()    {}
func (*ValidAuthorizations_MapElement) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

func (m *ValidAuthorizations_MapElement) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

func (m *ValidAuthorizations_MapElement) GetAuthz() *core.Authorization {
	if m != nil {
		return m.Authz
	}
	return nil
}

type CertificateStatus struct {
	Serial                *string `protobuf:"bytes,1,opt,name=serial" json:"serial,omitempty"`
	SubscriberApproved    *bool   `protobuf:"varint,2,opt,name=subscriberApproved" json:"subscriberApproved,omitempty"`
	Status                *string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	OcspLastUpdated       *int64  `protobuf:"varint,4,opt,name=ocspLastUpdated" json:"ocspLastUpdated,omitempty"`
	RevokedDate           *int64  `protobuf:"varint,5,opt,name=revokedDate" json:"revokedDate,omitempty"`
	RevokedReason         *int64  `protobuf:"varint,6,opt,name=revokedReason" json:"revokedReason,omitempty"`
	LastExpirationNagSent *int64  `protobuf:"varint,7,opt,name=lastExpirationNagSent" json:"lastExpirationNagSent,omitempty"`
	OcspResponse          []byte  `protobuf:"bytes,8,opt,name=ocspResponse" json:"ocspResponse,omitempty"`
	NotAfter              *int64  `protobuf:"varint,9,opt,name=notAfter" json:"notAfter,omitempty"`
	IsExpired             *bool   `protobuf:"varint,10,opt,name=isExpired" json:"isExpired,omitempty"`
	XXX_unrecognized      []byte  `json:"-"`
}

func (m *CertificateStatus) Reset()                    { *m = CertificateStatus{} }
func (m *CertificateStatus) String() string            { return proto1.CompactTextString(m) }
func (*CertificateStatus) ProtoMessage()               {}
func (*CertificateStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CertificateStatus) GetSerial() string {
	if m != nil && m.Serial != nil {
		return *m.Serial
	}
	return ""
}

func (m *CertificateStatus) GetSubscriberApproved() bool {
	if m != nil && m.SubscriberApproved != nil {
		return *m.SubscriberApproved
	}
	return false
}

func (m *CertificateStatus) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *CertificateStatus) GetOcspLastUpdated() int64 {
	if m != nil && m.OcspLastUpdated != nil {
		return *m.OcspLastUpdated
	}
	return 0
}

func (m *CertificateStatus) GetRevokedDate() int64 {
	if m != nil && m.RevokedDate != nil {
		return *m.RevokedDate
	}
	return 0
}

func (m *CertificateStatus) GetRevokedReason() int64 {
	if m != nil && m.RevokedReason != nil {
		return *m.RevokedReason
	}
	return 0
}

func (m *CertificateStatus) GetLastExpirationNagSent() int64 {
	if m != nil && m.LastExpirationNagSent != nil {
		return *m.LastExpirationNagSent
	}
	return 0
}

func (m *CertificateStatus) GetOcspResponse() []byte {
	if m != nil {
		return m.OcspResponse
	}
	return nil
}

func (m *CertificateStatus) GetNotAfter() int64 {
	if m != nil && m.NotAfter != nil {
		return *m.NotAfter
	}
	return 0
}

func (m *CertificateStatus) GetIsExpired() bool {
	if m != nil && m.IsExpired != nil {
		return *m.IsExpired
	}
	return false
}

type Serial struct {
	Serial           *string `protobuf:"bytes,1,opt,name=serial" json:"serial,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Serial) Reset()                    { *m = Serial{} }
func (m *Serial) String() string            { return proto1.CompactTextString(m) }
func (*Serial) ProtoMessage()               {}
func (*Serial) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Serial) GetSerial() string {
	if m != nil && m.Serial != nil {
		return *m.Serial
	}
	return ""
}

type Range struct {
	Earliest         *int64 `protobuf:"varint,1,opt,name=earliest" json:"earliest,omitempty"`
	Latest           *int64 `protobuf:"varint,2,opt,name=latest" json:"latest,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Range) Reset()                    { *m = Range{} }
func (m *Range) String() string            { return proto1.CompactTextString(m) }
func (*Range) ProtoMessage()               {}
func (*Range) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Range) GetEarliest() int64 {
	if m != nil && m.Earliest != nil {
		return *m.Earliest
	}
	return 0
}

func (m *Range) GetLatest() int64 {
	if m != nil && m.Latest != nil {
		return *m.Latest
	}
	return 0
}

type Count struct {
	Count            *int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Count) Reset()                    { *m = Count{} }
func (m *Count) String() string            { return proto1.CompactTextString(m) }
func (*Count) ProtoMessage()               {}
func (*Count) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Count) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type CountCertificatesByNamesRequest struct {
	Range            *Range   `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
	Names            []string `protobuf:"bytes,2,rep,name=names" json:"names,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CountCertificatesByNamesRequest) Reset()         { *m = CountCertificatesByNamesRequest{} }
func (m *CountCertificatesByNamesRequest) String() string { return proto1.CompactTextString(m) }
func (*CountCertificatesByNamesRequest) ProtoMessage()    {}
func (*CountCertificatesByNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10}
}

func (m *CountCertificatesByNamesRequest) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *CountCertificatesByNamesRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type CountByNames struct {
	CountByNames     []*CountByNames_MapElement `protobuf:"bytes,1,rep,name=countByNames" json:"countByNames,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *CountByNames) Reset()                    { *m = CountByNames{} }
func (m *CountByNames) String() string            { return proto1.CompactTextString(m) }
func (*CountByNames) ProtoMessage()               {}
func (*CountByNames) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CountByNames) GetCountByNames() []*CountByNames_MapElement {
	if m != nil {
		return m.CountByNames
	}
	return nil
}

type CountByNames_MapElement struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Count            *int64  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CountByNames_MapElement) Reset()                    { *m = CountByNames_MapElement{} }
func (m *CountByNames_MapElement) String() string            { return proto1.CompactTextString(m) }
func (*CountByNames_MapElement) ProtoMessage()               {}
func (*CountByNames_MapElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

func (m *CountByNames_MapElement) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CountByNames_MapElement) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type CountRegistrationsByIPRequest struct {
	Ip               []byte `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Range            *Range `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CountRegistrationsByIPRequest) Reset()                    { *m = CountRegistrationsByIPRequest{} }
func (m *CountRegistrationsByIPRequest) String() string            { return proto1.CompactTextString(m) }
func (*CountRegistrationsByIPRequest) ProtoMessage()               {}
func (*CountRegistrationsByIPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CountRegistrationsByIPRequest) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *CountRegistrationsByIPRequest) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

type CountInvalidAuthorizationsRequest struct {
	RegistrationID *int64  `protobuf:"varint,1,opt,name=registrationID" json:"registrationID,omitempty"`
	Hostname       *string `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	// Count authorizations that expire in this range.
	Range            *Range `protobuf:"bytes,3,opt,name=range" json:"range,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CountInvalidAuthorizationsRequest) Reset()         { *m = CountInvalidAuthorizationsRequest{} }
func (m *CountInvalidAuthorizationsRequest) String() string { return proto1.CompactTextString(m) }
func (*CountInvalidAuthorizationsRequest) ProtoMessage()    {}
func (*CountInvalidAuthorizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13}
}

func (m *CountInvalidAuthorizationsRequest) GetRegistrationID() int64 {
	if m != nil && m.RegistrationID != nil {
		return *m.RegistrationID
	}
	return 0
}

func (m *CountInvalidAuthorizationsRequest) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *CountInvalidAuthorizationsRequest) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

type GetSCTReceiptRequest struct {
	Serial           *string `protobuf:"bytes,1,opt,name=serial" json:"serial,omitempty"`
	LogID            *string `protobuf:"bytes,2,opt,name=logID" json:"logID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetSCTReceiptRequest) Reset()                    { *m = GetSCTReceiptRequest{} }
func (m *GetSCTReceiptRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetSCTReceiptRequest) ProtoMessage()               {}
func (*GetSCTReceiptRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetSCTReceiptRequest) GetSerial() string {
	if m != nil && m.Serial != nil {
		return *m.Serial
	}
	return ""
}

func (m *GetSCTReceiptRequest) GetLogID() string {
	if m != nil && m.LogID != nil {
		return *m.LogID
	}
	return ""
}

type CountFQDNSetsRequest struct {
	Window           *int64   `protobuf:"varint,1,opt,name=window" json:"window,omitempty"`
	Domains          []string `protobuf:"bytes,2,rep,name=domains" json:"domains,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CountFQDNSetsRequest) Reset()                    { *m = CountFQDNSetsRequest{} }
func (m *CountFQDNSetsRequest) String() string            { return proto1.CompactTextString(m) }
func (*CountFQDNSetsRequest) ProtoMessage()               {}
func (*CountFQDNSetsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CountFQDNSetsRequest) GetWindow() int64 {
	if m != nil && m.Window != nil {
		return *m.Window
	}
	return 0
}

func (m *CountFQDNSetsRequest) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

type FQDNSetExistsRequest struct {
	Domains          []string `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FQDNSetExistsRequest) Reset()                    { *m = FQDNSetExistsRequest{} }
func (m *FQDNSetExistsRequest) String() string            { return proto1.CompactTextString(m) }
func (*FQDNSetExistsRequest) ProtoMessage()               {}
func (*FQDNSetExistsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FQDNSetExistsRequest) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

type Exists struct {
	Exists           *bool  `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Exists) Reset()                    { *m = Exists{} }
func (m *Exists) String() string            { return proto1.CompactTextString(m) }
func (*Exists) ProtoMessage()               {}
func (*Exists) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Exists) GetExists() bool {
	if m != nil && m.Exists != nil {
		return *m.Exists
	}
	return false
}

type MarkCertificateRevokedRequest struct {
	Serial           *string `protobuf:"bytes,1,opt,name=serial" json:"serial,omitempty"`
	Code             *int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MarkCertificateRevokedRequest) Reset()                    { *m = MarkCertificateRevokedRequest{} }
func (m *MarkCertificateRevokedRequest) String() string            { return proto1.CompactTextString(m) }
func (*MarkCertificateRevokedRequest) ProtoMessage()               {}
func (*MarkCertificateRevokedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *MarkCertificateRevokedRequest) GetSerial() string {
	if m != nil && m.Serial != nil {
		return *m.Serial
	}
	return ""
}

func (m *MarkCertificateRevokedRequest) GetCode() int64 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

type AddCertificateRequest struct {
	Der   []byte `protobuf:"bytes,1,opt,name=der" json:"der,omitempty"`
	RegID *int64 `protobuf:"varint,2,opt,name=regID" json:"regID,omitempty"`
	// A signed OCSP response for the certificate contained in "der".
	// Note: The certificate status in the OCSP response is assumed to be 0 (good).
	Ocsp             []byte `protobuf:"bytes,3,opt,name=ocsp" json:"ocsp,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AddCertificateRequest) Reset()                    { *m = AddCertificateRequest{} }
func (m *AddCertificateRequest) String() string            { return proto1.CompactTextString(m) }
func (*AddCertificateRequest) ProtoMessage()               {}
func (*AddCertificateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *AddCertificateRequest) GetDer() []byte {
	if m != nil {
		return m.Der
	}
	return nil
}

func (m *AddCertificateRequest) GetRegID() int64 {
	if m != nil && m.RegID != nil {
		return *m.RegID
	}
	return 0
}

func (m *AddCertificateRequest) GetOcsp() []byte {
	if m != nil {
		return m.Ocsp
	}
	return nil
}

type AddCertificateResponse struct {
	Digest           *string `protobuf:"bytes,1,opt,name=digest" json:"digest,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AddCertificateResponse) Reset()                    { *m = AddCertificateResponse{} }
func (m *AddCertificateResponse) String() string            { return proto1.CompactTextString(m) }
func (*AddCertificateResponse) ProtoMessage()               {}
func (*AddCertificateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *AddCertificateResponse) GetDigest() string {
	if m != nil && m.Digest != nil {
		return *m.Digest
	}
	return ""
}

type SignedCertificateTimestamp struct {
	Id                *int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SctVersion        *int64  `protobuf:"varint,2,opt,name=sctVersion" json:"sctVersion,omitempty"`
	LogID             *string `protobuf:"bytes,3,opt,name=logID" json:"logID,omitempty"`
	Timestamp         *int64  `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Extensions        []byte  `protobuf:"bytes,5,opt,name=extensions" json:"extensions,omitempty"`
	Signature         []byte  `protobuf:"bytes,6,opt,name=signature" json:"signature,omitempty"`
	CertificateSerial *string `protobuf:"bytes,7,opt,name=certificateSerial" json:"certificateSerial,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *SignedCertificateTimestamp) Reset()                    { *m = SignedCertificateTimestamp{} }
func (m *SignedCertificateTimestamp) String() string            { return proto1.CompactTextString(m) }
func (*SignedCertificateTimestamp) ProtoMessage()               {}
func (*SignedCertificateTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SignedCertificateTimestamp) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SignedCertificateTimestamp) GetSctVersion() int64 {
	if m != nil && m.SctVersion != nil {
		return *m.SctVersion
	}
	return 0
}

func (m *SignedCertificateTimestamp) GetLogID() string {
	if m != nil && m.LogID != nil {
		return *m.LogID
	}
	return ""
}

func (m *SignedCertificateTimestamp) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *SignedCertificateTimestamp) GetExtensions() []byte {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *SignedCertificateTimestamp) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedCertificateTimestamp) GetCertificateSerial() string {
	if m != nil && m.CertificateSerial != nil {
		return *m.CertificateSerial
	}
	return ""
}

type RevokeAuthorizationsByDomainRequest struct {
	Domain           *string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RevokeAuthorizationsByDomainRequest) Reset()         { *m = RevokeAuthorizationsByDomainRequest{} }
func (m *RevokeAuthorizationsByDomainRequest) String() string { return proto1.CompactTextString(m) }
func (*RevokeAuthorizationsByDomainRequest) ProtoMessage()    {}
func (*RevokeAuthorizationsByDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22}
}

func (m *RevokeAuthorizationsByDomainRequest) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

type RevokeAuthorizationsByDomainResponse struct {
	Finalized        *int64 `protobuf:"varint,1,opt,name=finalized" json:"finalized,omitempty"`
	Pending          *int64 `protobuf:"varint,2,opt,name=pending" json:"pending,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RevokeAuthorizationsByDomainResponse) Reset()         { *m = RevokeAuthorizationsByDomainResponse{} }
func (m *RevokeAuthorizationsByDomainResponse) String() string { return proto1.CompactTextString(m) }
func (*RevokeAuthorizationsByDomainResponse) ProtoMessage()    {}
func (*RevokeAuthorizationsByDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{23}
}

func (m *RevokeAuthorizationsByDomainResponse) GetFinalized() int64 {
	if m != nil && m.Finalized != nil {
		return *m.Finalized
	}
	return 0
}

func (m *RevokeAuthorizationsByDomainResponse) GetPending() int64 {
	if m != nil && m.Pending != nil {
		return *m.Pending
	}
	return 0
}

func init() {
	proto1.RegisterType((*RegistrationID)(nil), "sa.RegistrationID")
	proto1.RegisterType((*JSONWebKey)(nil), "sa.JSONWebKey")
	proto1.RegisterType((*AuthorizationID)(nil), "sa.AuthorizationID")
	proto1.RegisterType((*GetPendingAuthorizationRequest)(nil), "sa.GetPendingAuthorizationRequest")
	proto1.RegisterType((*GetValidAuthorizationsRequest)(nil), "sa.GetValidAuthorizationsRequest")
	proto1.RegisterType((*ValidAuthorizations)(nil), "sa.ValidAuthorizations")
	proto1.RegisterType((*ValidAuthorizations_MapElement)(nil), "sa.ValidAuthorizations.MapElement")
	proto1.RegisterType((*CertificateStatus)(nil), "sa.CertificateStatus")
	proto1.RegisterType((*Serial)(nil), "sa.Serial")
	proto1.RegisterType((*Range)(nil), "sa.Range")
	proto1.RegisterType((*Count)(nil), "sa.Count")
	proto1.RegisterType((*CountCertificatesByNamesRequest)(nil), "sa.CountCertificatesByNamesRequest")
	proto1.RegisterType((*CountByNames)(nil), "sa.CountByNames")
	proto1.RegisterType((*CountByNames_MapElement)(nil), "sa.CountByNames.MapElement")
	proto1.RegisterType((*CountRegistrationsByIPRequest)(nil), "sa.CountRegistrationsByIPRequest")
	proto1.RegisterType((*CountInvalidAuthorizationsRequest)(nil), "sa.CountInvalidAuthorizationsRequest")
	proto1.RegisterType((*GetSCTReceiptRequest)(nil), "sa.GetSCTReceiptRequest")
	proto1.RegisterType((*CountFQDNSetsRequest)(nil), "sa.CountFQDNSetsRequest")
	proto1.RegisterType((*FQDNSetExistsRequest)(nil), "sa.FQDNSetExistsRequest")
	proto1.RegisterType((*Exists)(nil), "sa.Exists")
	proto1.RegisterType((*MarkCertificateRevokedRequest)(nil), "sa.MarkCertificateRevokedRequest")
	proto1.RegisterType((*AddCertificateRequest)(nil), "sa.AddCertificateRequest")
	proto1.RegisterType((*AddCertificateResponse)(nil), "sa.AddCertificateResponse")
	proto1.RegisterType((*SignedCertificateTimestamp)(nil), "sa.SignedCertificateTimestamp")
	proto1.RegisterType((*RevokeAuthorizationsByDomainRequest)(nil), "sa.RevokeAuthorizationsByDomainRequest")
	proto1.RegisterType((*RevokeAuthorizationsByDomainResponse)(nil), "sa.RevokeAuthorizationsByDomainResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StorageAuthority service

type StorageAuthorityClient interface {
	// Getters
	GetRegistration(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*core.Registration, error)
	GetRegistrationByKey(ctx context.Context, in *JSONWebKey, opts ...grpc.CallOption) (*core.Registration, error)
	GetAuthorization(ctx context.Context, in *AuthorizationID, opts ...grpc.CallOption) (*core.Authorization, error)
	GetPendingAuthorization(ctx context.Context, in *GetPendingAuthorizationRequest, opts ...grpc.CallOption) (*core.Authorization, error)
	GetValidAuthorizations(ctx context.Context, in *GetValidAuthorizationsRequest, opts ...grpc.CallOption) (*ValidAuthorizations, error)
	GetCertificate(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*core.Certificate, error)
	GetCertificateStatus(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*CertificateStatus, error)
	CountCertificatesRange(ctx context.Context, in *Range, opts ...grpc.CallOption) (*Count, error)
	CountCertificatesByNames(ctx context.Context, in *CountCertificatesByNamesRequest, opts ...grpc.CallOption) (*CountByNames, error)
	CountCertificatesByExactNames(ctx context.Context, in *CountCertificatesByNamesRequest, opts ...grpc.CallOption) (*CountByNames, error)
	CountRegistrationsByIP(ctx context.Context, in *CountRegistrationsByIPRequest, opts ...grpc.CallOption) (*Count, error)
	CountRegistrationsByIPRange(ctx context.Context, in *CountRegistrationsByIPRequest, opts ...grpc.CallOption) (*Count, error)
	CountPendingAuthorizations(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*Count, error)
	// Return a count of authorizations with status "invalid" that belong to
	// a given registration ID and expire in the given time range.
	CountInvalidAuthorizations(ctx context.Context, in *CountInvalidAuthorizationsRequest, opts ...grpc.CallOption) (*Count, error)
	GetSCTReceipt(ctx context.Context, in *GetSCTReceiptRequest, opts ...grpc.CallOption) (*SignedCertificateTimestamp, error)
	CountFQDNSets(ctx context.Context, in *CountFQDNSetsRequest, opts ...grpc.CallOption) (*Count, error)
	FQDNSetExists(ctx context.Context, in *FQDNSetExistsRequest, opts ...grpc.CallOption) (*Exists, error)
	// Adders
	NewRegistration(ctx context.Context, in *core.Registration, opts ...grpc.CallOption) (*core.Registration, error)
	UpdateRegistration(ctx context.Context, in *core.Registration, opts ...grpc.CallOption) (*core.Empty, error)
	NewPendingAuthorization(ctx context.Context, in *core.Authorization, opts ...grpc.CallOption) (*core.Authorization, error)
	UpdatePendingAuthorization(ctx context.Context, in *core.Authorization, opts ...grpc.CallOption) (*core.Empty, error)
	FinalizeAuthorization(ctx context.Context, in *core.Authorization, opts ...grpc.CallOption) (*core.Empty, error)
	MarkCertificateRevoked(ctx context.Context, in *MarkCertificateRevokedRequest, opts ...grpc.CallOption) (*core.Empty, error)
	AddCertificate(ctx context.Context, in *AddCertificateRequest, opts ...grpc.CallOption) (*AddCertificateResponse, error)
	AddSCTReceipt(ctx context.Context, in *SignedCertificateTimestamp, opts ...grpc.CallOption) (*core.Empty, error)
	RevokeAuthorizationsByDomain(ctx context.Context, in *RevokeAuthorizationsByDomainRequest, opts ...grpc.CallOption) (*RevokeAuthorizationsByDomainResponse, error)
	DeactivateRegistration(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*core.Empty, error)
	DeactivateAuthorization(ctx context.Context, in *AuthorizationID, opts ...grpc.CallOption) (*core.Empty, error)
}

type storageAuthorityClient struct {
	cc *grpc.ClientConn
}

func NewStorageAuthorityClient(cc *grpc.ClientConn) StorageAuthorityClient {
	return &storageAuthorityClient{cc}
}

func (c *storageAuthorityClient) GetRegistration(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*core.Registration, error) {
	out := new(core.Registration)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/GetRegistration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetRegistrationByKey(ctx context.Context, in *JSONWebKey, opts ...grpc.CallOption) (*core.Registration, error) {
	out := new(core.Registration)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/GetRegistrationByKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetAuthorization(ctx context.Context, in *AuthorizationID, opts ...grpc.CallOption) (*core.Authorization, error) {
	out := new(core.Authorization)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/GetAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetPendingAuthorization(ctx context.Context, in *GetPendingAuthorizationRequest, opts ...grpc.CallOption) (*core.Authorization, error) {
	out := new(core.Authorization)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/GetPendingAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetValidAuthorizations(ctx context.Context, in *GetValidAuthorizationsRequest, opts ...grpc.CallOption) (*ValidAuthorizations, error) {
	out := new(ValidAuthorizations)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/GetValidAuthorizations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetCertificate(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*core.Certificate, error) {
	out := new(core.Certificate)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/GetCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetCertificateStatus(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*CertificateStatus, error) {
	out := new(CertificateStatus)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/GetCertificateStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountCertificatesRange(ctx context.Context, in *Range, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/CountCertificatesRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountCertificatesByNames(ctx context.Context, in *CountCertificatesByNamesRequest, opts ...grpc.CallOption) (*CountByNames, error) {
	out := new(CountByNames)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/CountCertificatesByNames", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountCertificatesByExactNames(ctx context.Context, in *CountCertificatesByNamesRequest, opts ...grpc.CallOption) (*CountByNames, error) {
	out := new(CountByNames)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/CountCertificatesByExactNames", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountRegistrationsByIP(ctx context.Context, in *CountRegistrationsByIPRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/CountRegistrationsByIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountRegistrationsByIPRange(ctx context.Context, in *CountRegistrationsByIPRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/CountRegistrationsByIPRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountPendingAuthorizations(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/CountPendingAuthorizations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountInvalidAuthorizations(ctx context.Context, in *CountInvalidAuthorizationsRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/CountInvalidAuthorizations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetSCTReceipt(ctx context.Context, in *GetSCTReceiptRequest, opts ...grpc.CallOption) (*SignedCertificateTimestamp, error) {
	out := new(SignedCertificateTimestamp)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/GetSCTReceipt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountFQDNSets(ctx context.Context, in *CountFQDNSetsRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/CountFQDNSets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) FQDNSetExists(ctx context.Context, in *FQDNSetExistsRequest, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/FQDNSetExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) NewRegistration(ctx context.Context, in *core.Registration, opts ...grpc.CallOption) (*core.Registration, error) {
	out := new(core.Registration)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/NewRegistration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) UpdateRegistration(ctx context.Context, in *core.Registration, opts ...grpc.CallOption) (*core.Empty, error) {
	out := new(core.Empty)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/UpdateRegistration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) NewPendingAuthorization(ctx context.Context, in *core.Authorization, opts ...grpc.CallOption) (*core.Authorization, error) {
	out := new(core.Authorization)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/NewPendingAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) UpdatePendingAuthorization(ctx context.Context, in *core.Authorization, opts ...grpc.CallOption) (*core.Empty, error) {
	out := new(core.Empty)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/UpdatePendingAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) FinalizeAuthorization(ctx context.Context, in *core.Authorization, opts ...grpc.CallOption) (*core.Empty, error) {
	out := new(core.Empty)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/FinalizeAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) MarkCertificateRevoked(ctx context.Context, in *MarkCertificateRevokedRequest, opts ...grpc.CallOption) (*core.Empty, error) {
	out := new(core.Empty)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/MarkCertificateRevoked", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) AddCertificate(ctx context.Context, in *AddCertificateRequest, opts ...grpc.CallOption) (*AddCertificateResponse, error) {
	out := new(AddCertificateResponse)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/AddCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) AddSCTReceipt(ctx context.Context, in *SignedCertificateTimestamp, opts ...grpc.CallOption) (*core.Empty, error) {
	out := new(core.Empty)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/AddSCTReceipt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) RevokeAuthorizationsByDomain(ctx context.Context, in *RevokeAuthorizationsByDomainRequest, opts ...grpc.CallOption) (*RevokeAuthorizationsByDomainResponse, error) {
	out := new(RevokeAuthorizationsByDomainResponse)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/RevokeAuthorizationsByDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) DeactivateRegistration(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*core.Empty, error) {
	out := new(core.Empty)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/DeactivateRegistration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) DeactivateAuthorization(ctx context.Context, in *AuthorizationID, opts ...grpc.CallOption) (*core.Empty, error) {
	out := new(core.Empty)
	err := grpc.Invoke(ctx, "/sa.StorageAuthority/DeactivateAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StorageAuthority service

type StorageAuthorityServer interface {
	// Getters
	GetRegistration(context.Context, *RegistrationID) (*core.Registration, error)
	GetRegistrationByKey(context.Context, *JSONWebKey) (*core.Registration, error)
	GetAuthorization(context.Context, *AuthorizationID) (*core.Authorization, error)
	GetPendingAuthorization(context.Context, *GetPendingAuthorizationRequest) (*core.Authorization, error)
	GetValidAuthorizations(context.Context, *GetValidAuthorizationsRequest) (*ValidAuthorizations, error)
	GetCertificate(context.Context, *Serial) (*core.Certificate, error)
	GetCertificateStatus(context.Context, *Serial) (*CertificateStatus, error)
	CountCertificatesRange(context.Context, *Range) (*Count, error)
	CountCertificatesByNames(context.Context, *CountCertificatesByNamesRequest) (*CountByNames, error)
	CountCertificatesByExactNames(context.Context, *CountCertificatesByNamesRequest) (*CountByNames, error)
	CountRegistrationsByIP(context.Context, *CountRegistrationsByIPRequest) (*Count, error)
	CountRegistrationsByIPRange(context.Context, *CountRegistrationsByIPRequest) (*Count, error)
	CountPendingAuthorizations(context.Context, *RegistrationID) (*Count, error)
	// Return a count of authorizations with status "invalid" that belong to
	// a given registration ID and expire in the given time range.
	CountInvalidAuthorizations(context.Context, *CountInvalidAuthorizationsRequest) (*Count, error)
	GetSCTReceipt(context.Context, *GetSCTReceiptRequest) (*SignedCertificateTimestamp, error)
	CountFQDNSets(context.Context, *CountFQDNSetsRequest) (*Count, error)
	FQDNSetExists(context.Context, *FQDNSetExistsRequest) (*Exists, error)
	// Adders
	NewRegistration(context.Context, *core.Registration) (*core.Registration, error)
	UpdateRegistration(context.Context, *core.Registration) (*core.Empty, error)
	NewPendingAuthorization(context.Context, *core.Authorization) (*core.Authorization, error)
	UpdatePendingAuthorization(context.Context, *core.Authorization) (*core.Empty, error)
	FinalizeAuthorization(context.Context, *core.Authorization) (*core.Empty, error)
	MarkCertificateRevoked(context.Context, *MarkCertificateRevokedRequest) (*core.Empty, error)
	AddCertificate(context.Context, *AddCertificateRequest) (*AddCertificateResponse, error)
	AddSCTReceipt(context.Context, *SignedCertificateTimestamp) (*core.Empty, error)
	RevokeAuthorizationsByDomain(context.Context, *RevokeAuthorizationsByDomainRequest) (*RevokeAuthorizationsByDomainResponse, error)
	DeactivateRegistration(context.Context, *RegistrationID) (*core.Empty, error)
	DeactivateAuthorization(context.Context, *AuthorizationID) (*core.Empty, error)
}

func RegisterStorageAuthorityServer(s *grpc.Server, srv StorageAuthorityServer) {
	s.RegisterService(&_StorageAuthority_serviceDesc, srv)
}

func _StorageAuthority_GetRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetRegistration(ctx, req.(*RegistrationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetRegistrationByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JSONWebKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetRegistrationByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetRegistrationByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetRegistrationByKey(ctx, req.(*JSONWebKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetAuthorization(ctx, req.(*AuthorizationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetPendingAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetPendingAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetPendingAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetPendingAuthorization(ctx, req.(*GetPendingAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetValidAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetValidAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetValidAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetValidAuthorizations(ctx, req.(*GetValidAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Serial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetCertificate(ctx, req.(*Serial))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetCertificateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Serial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetCertificateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetCertificateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetCertificateStatus(ctx, req.(*Serial))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountCertificatesRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Range)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountCertificatesRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountCertificatesRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountCertificatesRange(ctx, req.(*Range))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountCertificatesByNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCertificatesByNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountCertificatesByNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountCertificatesByNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountCertificatesByNames(ctx, req.(*CountCertificatesByNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountCertificatesByExactNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCertificatesByNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountCertificatesByExactNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountCertificatesByExactNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountCertificatesByExactNames(ctx, req.(*CountCertificatesByNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountRegistrationsByIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRegistrationsByIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountRegistrationsByIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountRegistrationsByIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountRegistrationsByIP(ctx, req.(*CountRegistrationsByIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountRegistrationsByIPRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRegistrationsByIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountRegistrationsByIPRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountRegistrationsByIPRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountRegistrationsByIPRange(ctx, req.(*CountRegistrationsByIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountPendingAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountPendingAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountPendingAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountPendingAuthorizations(ctx, req.(*RegistrationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountInvalidAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountInvalidAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountInvalidAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountInvalidAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountInvalidAuthorizations(ctx, req.(*CountInvalidAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetSCTReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSCTReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetSCTReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetSCTReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetSCTReceipt(ctx, req.(*GetSCTReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountFQDNSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountFQDNSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountFQDNSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountFQDNSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountFQDNSets(ctx, req.(*CountFQDNSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_FQDNSetExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FQDNSetExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).FQDNSetExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/FQDNSetExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).FQDNSetExists(ctx, req.(*FQDNSetExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_NewRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).NewRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/NewRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).NewRegistration(ctx, req.(*core.Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_UpdateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).UpdateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/UpdateRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).UpdateRegistration(ctx, req.(*core.Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_NewPendingAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Authorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).NewPendingAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/NewPendingAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).NewPendingAuthorization(ctx, req.(*core.Authorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_UpdatePendingAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Authorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).UpdatePendingAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/UpdatePendingAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).UpdatePendingAuthorization(ctx, req.(*core.Authorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_FinalizeAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Authorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).FinalizeAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/FinalizeAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).FinalizeAuthorization(ctx, req.(*core.Authorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_MarkCertificateRevoked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkCertificateRevokedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).MarkCertificateRevoked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/MarkCertificateRevoked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).MarkCertificateRevoked(ctx, req.(*MarkCertificateRevokedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_AddCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).AddCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/AddCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).AddCertificate(ctx, req.(*AddCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_AddSCTReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedCertificateTimestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).AddSCTReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/AddSCTReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).AddSCTReceipt(ctx, req.(*SignedCertificateTimestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_RevokeAuthorizationsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAuthorizationsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).RevokeAuthorizationsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/RevokeAuthorizationsByDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).RevokeAuthorizationsByDomain(ctx, req.(*RevokeAuthorizationsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_DeactivateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).DeactivateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/DeactivateRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).DeactivateRegistration(ctx, req.(*RegistrationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_DeactivateAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).DeactivateAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/DeactivateAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).DeactivateAuthorization(ctx, req.(*AuthorizationID))
	}
	return interceptor(ctx, in, info, handler)
}

var _StorageAuthority_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sa.StorageAuthority",
	HandlerType: (*StorageAuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegistration",
			Handler:    _StorageAuthority_GetRegistration_Handler,
		},
		{
			MethodName: "GetRegistrationByKey",
			Handler:    _StorageAuthority_GetRegistrationByKey_Handler,
		},
		{
			MethodName: "GetAuthorization",
			Handler:    _StorageAuthority_GetAuthorization_Handler,
		},
		{
			MethodName: "GetPendingAuthorization",
			Handler:    _StorageAuthority_GetPendingAuthorization_Handler,
		},
		{
			MethodName: "GetValidAuthorizations",
			Handler:    _StorageAuthority_GetValidAuthorizations_Handler,
		},
		{
			MethodName: "GetCertificate",
			Handler:    _StorageAuthority_GetCertificate_Handler,
		},
		{
			MethodName: "GetCertificateStatus",
			Handler:    _StorageAuthority_GetCertificateStatus_Handler,
		},
		{
			MethodName: "CountCertificatesRange",
			Handler:    _StorageAuthority_CountCertificatesRange_Handler,
		},
		{
			MethodName: "CountCertificatesByNames",
			Handler:    _StorageAuthority_CountCertificatesByNames_Handler,
		},
		{
			MethodName: "CountCertificatesByExactNames",
			Handler:    _StorageAuthority_CountCertificatesByExactNames_Handler,
		},
		{
			MethodName: "CountRegistrationsByIP",
			Handler:    _StorageAuthority_CountRegistrationsByIP_Handler,
		},
		{
			MethodName: "CountRegistrationsByIPRange",
			Handler:    _StorageAuthority_CountRegistrationsByIPRange_Handler,
		},
		{
			MethodName: "CountPendingAuthorizations",
			Handler:    _StorageAuthority_CountPendingAuthorizations_Handler,
		},
		{
			MethodName: "CountInvalidAuthorizations",
			Handler:    _StorageAuthority_CountInvalidAuthorizations_Handler,
		},
		{
			MethodName: "GetSCTReceipt",
			Handler:    _StorageAuthority_GetSCTReceipt_Handler,
		},
		{
			MethodName: "CountFQDNSets",
			Handler:    _StorageAuthority_CountFQDNSets_Handler,
		},
		{
			MethodName: "FQDNSetExists",
			Handler:    _StorageAuthority_FQDNSetExists_Handler,
		},
		{
			MethodName: "NewRegistration",
			Handler:    _StorageAuthority_NewRegistration_Handler,
		},
		{
			MethodName: "UpdateRegistration",
			Handler:    _StorageAuthority_UpdateRegistration_Handler,
		},
		{
			MethodName: "NewPendingAuthorization",
			Handler:    _StorageAuthority_NewPendingAuthorization_Handler,
		},
		{
			MethodName: "UpdatePendingAuthorization",
			Handler:    _StorageAuthority_UpdatePendingAuthorization_Handler,
		},
		{
			MethodName: "FinalizeAuthorization",
			Handler:    _StorageAuthority_FinalizeAuthorization_Handler,
		},
		{
			MethodName: "MarkCertificateRevoked",
			Handler:    _StorageAuthority_MarkCertificateRevoked_Handler,
		},
		{
			MethodName: "AddCertificate",
			Handler:    _StorageAuthority_AddCertificate_Handler,
		},
		{
			MethodName: "AddSCTReceipt",
			Handler:    _StorageAuthority_AddSCTReceipt_Handler,
		},
		{
			MethodName: "RevokeAuthorizationsByDomain",
			Handler:    _StorageAuthority_RevokeAuthorizationsByDomain_Handler,
		},
		{
			MethodName: "DeactivateRegistration",
			Handler:    _StorageAuthority_DeactivateRegistration_Handler,
		},
		{
			MethodName: "DeactivateAuthorization",
			Handler:    _StorageAuthority_DeactivateAuthorization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sa/proto/sa.proto",
}

func init() { proto1.RegisterFile("sa/proto/sa.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdf, 0x52, 0xdb, 0xc6,
	0x17, 0xb6, 0x71, 0x0c, 0xf8, 0xf8, 0x1f, 0x5e, 0xc0, 0x28, 0x4a, 0xc8, 0x2f, 0xd9, 0xfc, 0x3a,
	0x21, 0x37, 0xa4, 0x61, 0x26, 0xcd, 0x05, 0x4d, 0x27, 0x10, 0x1c, 0x0a, 0x69, 0x68, 0x6a, 0x13,
	0xda, 0xe9, 0xdd, 0x46, 0x3a, 0x71, 0xb6, 0x31, 0x92, 0xaa, 0x5d, 0x03, 0xce, 0x4c, 0x5f, 0xa0,
	0x4f, 0xd1, 0xc7, 0xe8, 0x53, 0xf5, 0x19, 0x3a, 0xbb, 0x2b, 0xdb, 0x92, 0x2c, 0x99, 0x64, 0x7a,
	0x27, 0xef, 0x9e, 0xf3, 0xed, 0xd9, 0xb3, 0xdf, 0xf9, 0x3e, 0x80, 0x96, 0x60, 0x8f, 0x82, 0xd0,
	0x97, 0xfe, 0x23, 0xc1, 0xb6, 0xf5, 0x07, 0x59, 0x10, 0xcc, 0x5e, 0x77, 0xfc, 0x10, 0xa3, 0x0d,
	0xf5, 0x69, 0xb6, 0xe8, 0x6d, 0x68, 0x74, 0xb1, 0xcf, 0x85, 0x0c, 0x99, 0xe4, 0xbe, 0x77, 0x74,
	0x40, 0x00, 0x16, 0xb8, 0x6b, 0x15, 0xef, 0x16, 0xb7, 0x4a, 0xf4, 0x26, 0xc0, 0x71, 0xef, 0xc7,
	0x93, 0x9f, 0xf1, 0xdd, 0x2b, 0x1c, 0x91, 0x2a, 0x94, 0x7e, 0xbb, 0xfc, 0xa8, 0xb7, 0x6a, 0x74,
	0x13, 0x9a, 0x7b, 0x43, 0xf9, 0xc1, 0x0f, 0xf9, 0xa7, 0xd9, 0xcc, 0x0a, 0xfd, 0x03, 0xee, 0x1c,
	0xa2, 0x7c, 0x83, 0x9e, 0xcb, 0xbd, 0x7e, 0x22, 0xb0, 0x8b, 0xbf, 0x0f, 0x51, 0x48, 0xd2, 0x86,
	0x46, 0x98, 0x38, 0xd9, 0x9c, 0xa9, 0xd6, 0xb9, 0x8b, 0x9e, 0xe4, 0xef, 0x39, 0x86, 0xa7, 0xa3,
	0x00, 0xad, 0x05, 0x85, 0x48, 0x36, 0xa0, 0x39, 0x5d, 0x3f, 0x63, 0x83, 0x21, 0x5a, 0x25, 0xbd,
	0x41, 0x00, 0x2e, 0xd8, 0x80, 0xbb, 0x6f, 0x3d, 0xc9, 0x07, 0xd6, 0x0d, 0x5d, 0xf8, 0x5b, 0xd8,
	0x3c, 0x44, 0x79, 0xa6, 0x96, 0x13, 0x87, 0x8b, 0xeb, 0x4e, 0x6f, 0xc2, 0x92, 0xeb, 0x9f, 0x33,
	0xee, 0x09, 0x6b, 0xe1, 0x6e, 0x69, 0xab, 0xa2, 0x2e, 0xed, 0xf9, 0x97, 0xfa, 0xa8, 0x12, 0xfd,
	0xb3, 0x08, 0xab, 0x19, 0xa0, 0xe4, 0x31, 0x94, 0x75, 0x09, 0x56, 0xf1, 0x6e, 0x69, 0xab, 0xba,
	0x43, 0xb7, 0x05, 0xdb, 0xce, 0x88, 0xdb, 0x7e, 0xcd, 0x82, 0xce, 0x00, 0xcf, 0xd1, 0x93, 0xf6,
	0x73, 0x80, 0xe9, 0x2f, 0xd2, 0x80, 0x45, 0x73, 0xac, 0x69, 0x1f, 0xa1, 0x50, 0x66, 0x43, 0xf9,
	0xe1, 0x93, 0xbe, 0x7b, 0x75, 0x67, 0x75, 0x5b, 0x3f, 0x59, 0x02, 0x8d, 0xfe, 0x53, 0x84, 0xd6,
	0x0b, 0x0c, 0x55, 0x43, 0x1c, 0x26, 0xb1, 0x27, 0x99, 0x1c, 0x0a, 0x85, 0x24, 0x30, 0xe4, 0x6c,
	0x10, 0x21, 0xd9, 0x40, 0xc4, 0xf0, 0x9d, 0x70, 0x42, 0xfe, 0x0e, 0xc3, 0xbd, 0x20, 0x08, 0xfd,
	0x0b, 0x74, 0x35, 0xec, 0xb2, 0x8e, 0xd5, 0x59, 0x51, 0x27, 0x37, 0xa0, 0xe9, 0x3b, 0x22, 0xf8,
	0x81, 0x09, 0xf9, 0x36, 0x70, 0x99, 0x44, 0xd7, 0xb4, 0x93, 0xac, 0x42, 0x35, 0xc4, 0x0b, 0xff,
	0x23, 0xba, 0x07, 0x4c, 0xa2, 0x55, 0xd6, 0x8b, 0xeb, 0x50, 0x8f, 0x16, 0xbb, 0xc8, 0x84, 0xef,
	0x59, 0x8b, 0x7a, 0x79, 0x13, 0xd6, 0x07, 0x4c, 0xc8, 0xce, 0x55, 0xc0, 0x4d, 0x6f, 0x4f, 0x58,
	0xbf, 0x87, 0x9e, 0xb4, 0x96, 0xf4, 0xf6, 0x1a, 0xd4, 0xd4, 0x19, 0x5d, 0x14, 0x81, 0xef, 0x09,
	0xb4, 0x96, 0x15, 0x9b, 0xc8, 0x0a, 0x2c, 0x7b, 0xbe, 0xdc, 0x7b, 0x2f, 0x31, 0xb4, 0x2a, 0x3a,
	0xae, 0x05, 0x15, 0x2e, 0x34, 0x08, 0xba, 0x16, 0xa8, 0x72, 0xa9, 0x05, 0x8b, 0x3d, 0x7d, 0xb5,
	0xf4, 0x25, 0xe9, 0x43, 0x28, 0x77, 0x99, 0xd7, 0x47, 0x85, 0x83, 0x2c, 0x1c, 0x70, 0x14, 0x32,
	0x7a, 0xd0, 0x06, 0x2c, 0x0e, 0x98, 0x54, 0xbf, 0x17, 0xf4, 0x13, 0xb6, 0xa1, 0xfc, 0xc2, 0x1f,
	0x7a, 0x92, 0xd4, 0xa1, 0xec, 0xa8, 0x8f, 0x88, 0xea, 0xc7, 0xf0, 0x3f, 0xbd, 0x1e, 0xeb, 0xa8,
	0xd8, 0x1f, 0x9d, 0xb0, 0x73, 0x9c, 0x70, 0xc6, 0x82, 0x72, 0xa8, 0x4e, 0xd1, 0x19, 0xd5, 0x9d,
	0x8a, 0x7a, 0x65, 0x73, 0x6c, 0x1d, 0xca, 0x9e, 0x8a, 0x34, 0x9c, 0xa1, 0x03, 0xa8, 0x69, 0xac,
	0x28, 0x9f, 0x3c, 0x86, 0x9a, 0x13, 0xfb, 0x1d, 0xb1, 0xe4, 0x96, 0xca, 0x8f, 0xc7, 0xc5, 0xe9,
	0xf1, 0x30, 0x41, 0x8f, 0x1a, 0xdc, 0x50, 0xf8, 0xd1, 0x93, 0x4e, 0x2a, 0x37, 0x37, 0xea, 0xc0,
	0xa6, 0x46, 0x89, 0xcf, 0xb1, 0xd8, 0x1f, 0x1d, 0xbd, 0x19, 0xd7, 0xad, 0xe6, 0x32, 0x30, 0x63,
	0x3b, 0xbd, 0xc3, 0x42, 0xea, 0x0e, 0xb4, 0x0f, 0xf7, 0x34, 0xcc, 0x91, 0x77, 0xf1, 0xe5, 0x63,
	0xb3, 0x02, 0xcb, 0x1f, 0x7c, 0x21, 0x75, 0x91, 0x66, 0x5c, 0x27, 0x07, 0x95, 0xd2, 0x07, 0x3d,
	0x81, 0xb5, 0x43, 0x94, 0xbd, 0x17, 0xa7, 0x5d, 0x74, 0x90, 0x07, 0x72, 0x8c, 0x9d, 0x66, 0x6e,
	0x1d, 0xca, 0x03, 0xbf, 0x7f, 0x74, 0x60, 0x00, 0xe9, 0x53, 0x58, 0xd3, 0xf5, 0xbd, 0xfc, 0xe9,
	0xe0, 0xa4, 0x87, 0x52, 0xc4, 0xd2, 0x2e, 0xb9, 0xe7, 0xfa, 0x97, 0x39, 0x13, 0x4c, 0x1f, 0xc0,
	0x5a, 0x94, 0xd3, 0xb9, 0xe2, 0x62, 0x9a, 0x18, 0x0b, 0x2c, 0xea, 0x40, 0x0b, 0x16, 0x4d, 0x84,
	0xc2, 0x44, 0xfd, 0xa5, 0x31, 0x97, 0xe9, 0x33, 0xd8, 0x7c, 0xcd, 0xc2, 0x8f, 0x31, 0x6e, 0x74,
	0xc7, 0xcc, 0xcf, 0xae, 0xbd, 0x06, 0x37, 0x1c, 0xdf, 0xc5, 0xe8, 0x85, 0xf6, 0x60, 0x7d, 0xcf,
	0x75, 0x13, 0xd9, 0x26, 0xad, 0x0a, 0x25, 0x17, 0xc3, 0xe8, 0x69, 0xea, 0x50, 0x0e, 0x71, 0x7c,
	0xdf, 0x92, 0x82, 0x50, 0x83, 0xa2, 0xfb, 0x57, 0xa3, 0x5b, 0xd0, 0x4e, 0x43, 0x98, 0x01, 0xd2,
	0xd2, 0xc1, 0xfb, 0x63, 0xc2, 0x57, 0xe8, 0x5f, 0x45, 0xb0, 0x7b, 0xbc, 0xef, 0x61, 0x3c, 0xfa,
	0x94, 0x9f, 0xa3, 0x90, 0xec, 0x3c, 0x88, 0xcb, 0xbb, 0x52, 0x4e, 0xe1, 0xc8, 0x33, 0x0c, 0x05,
	0xf7, 0xbd, 0xe8, 0xd8, 0x49, 0xd7, 0x8d, 0x24, 0xb4, 0xa0, 0x22, 0xc7, 0xb9, 0x91, 0x18, 0x10,
	0x00, 0xbc, 0x92, 0xe8, 0xa9, 0x24, 0xa1, 0xb5, 0xa0, 0xa6, 0xc2, 0x04, 0xef, 0x7b, 0x4c, 0x0e,
	0x43, 0xd4, 0x3a, 0x50, 0x23, 0x37, 0xa1, 0xe5, 0xc4, 0xd4, 0xc9, 0x74, 0x67, 0x49, 0x97, 0xf8,
	0x04, 0xee, 0x9b, 0xfe, 0x25, 0x49, 0xb6, 0x3f, 0x3a, 0xd0, 0xef, 0x11, 0x6b, 0x6a, 0x5c, 0x14,
	0xe9, 0x31, 0xfc, 0x7f, 0x7e, 0x5a, 0xd4, 0x91, 0x16, 0x54, 0xde, 0x73, 0x8f, 0x0d, 0xf8, 0x27,
	0x74, 0xa7, 0xa4, 0x08, 0x8c, 0x17, 0x99, 0x6b, 0xee, 0xfc, 0xdd, 0x84, 0x95, 0x9e, 0xf4, 0x43,
	0xd6, 0x1f, 0xa3, 0xc9, 0x11, 0xd9, 0x85, 0xe6, 0x21, 0x26, 0xe6, 0x88, 0x10, 0xcd, 0xdb, 0x04,
	0xe5, 0x6d, 0x62, 0xd4, 0x38, 0xbe, 0x4a, 0x0b, 0xe4, 0x5b, 0x4d, 0xeb, 0xf8, 0xe2, 0xfe, 0x48,
	0xb9, 0x66, 0x43, 0x21, 0x4c, 0x5d, 0x34, 0x27, 0xfb, 0x3b, 0x58, 0x39, 0x44, 0x99, 0xb8, 0x18,
	0x59, 0x55, 0x99, 0x29, 0x93, 0xb5, 0x33, 0xad, 0xa0, 0x40, 0x4e, 0x61, 0x23, 0xc7, 0x6f, 0x89,
	0x76, 0xa3, 0xf9, 0x66, 0x9c, 0x87, 0x7a, 0x06, 0xed, 0x6c, 0x1b, 0x25, 0xf7, 0x22, 0xd0, 0x7c,
	0x8b, 0xb5, 0x37, 0x72, 0x5c, 0x90, 0x16, 0xc8, 0x63, 0x68, 0x1c, 0x62, 0x5c, 0x6a, 0x09, 0xa8,
	0x60, 0x43, 0x12, 0xbb, 0x65, 0x8a, 0x89, 0x6d, 0xd3, 0x02, 0xd9, 0xd5, 0xed, 0x9d, 0xf5, 0xbb,
	0x78, 0xe2, 0xba, 0x56, 0xd4, 0x74, 0x08, 0x2d, 0x90, 0xaf, 0xa1, 0x3d, 0x23, 0xee, 0x46, 0xb9,
	0xa7, 0xba, 0x64, 0x57, 0x26, 0x7a, 0x4c, 0x0b, 0xa4, 0x07, 0x56, 0x9e, 0x1d, 0x90, 0xfb, 0x93,
	0xc0, 0x7c, 0xb3, 0xb0, 0x57, 0xd2, 0xea, 0x4e, 0x0b, 0xe4, 0x97, 0x48, 0xa9, 0x93, 0x69, 0x9d,
	0x2b, 0xe6, 0xc8, 0xff, 0x88, 0xfc, 0x7d, 0x74, 0xc1, 0x19, 0x0f, 0x30, 0x0f, 0x35, 0xd7, 0x1f,
	0x92, 0x17, 0x7f, 0x0d, 0xb7, 0x72, 0xa2, 0x75, 0xbf, 0xbe, 0x14, 0xee, 0x19, 0xd8, 0xfa, 0x33,
	0x8b, 0x7c, 0x22, 0x73, 0xba, 0x12, 0xe9, 0x6f, 0xa2, 0xf4, 0x4c, 0x53, 0x22, 0x5f, 0x4d, 0x42,
	0xe7, 0x99, 0x56, 0x12, 0xf1, 0x15, 0xd4, 0x13, 0xee, 0x43, 0xac, 0x88, 0xc9, 0x33, 0x86, 0x64,
	0xdf, 0xd1, 0xd4, 0xca, 0x95, 0x52, 0x5a, 0x20, 0xdf, 0x40, 0x3d, 0xe1, 0x49, 0x06, 0x2c, 0xcb,
	0xa6, 0x92, 0x45, 0x3c, 0x85, 0x7a, 0xc2, 0x92, 0x4c, 0x5e, 0x96, 0x4b, 0xd9, 0x9a, 0xdf, 0x66,
	0x49, 0x4f, 0x41, 0xf3, 0x04, 0x2f, 0x53, 0x0a, 0x35, 0xa3, 0x27, 0x39, 0x1a, 0xf3, 0x14, 0x88,
	0xf9, 0xb3, 0xee, 0xda, 0xfc, 0xaa, 0x59, 0xeb, 0x9c, 0x07, 0x72, 0x44, 0x0b, 0xa4, 0x03, 0x1b,
	0x27, 0x78, 0x99, 0x29, 0x2e, 0x59, 0xc2, 0x91, 0xa7, 0x26, 0xcf, 0xc1, 0x36, 0xe7, 0x7f, 0x3e,
	0x52, 0xaa, 0x90, 0x5d, 0x58, 0x7f, 0x19, 0x29, 0xfb, 0x97, 0x27, 0x1f, 0x43, 0x3b, 0xdb, 0xc4,
	0x0d, 0xa9, 0xe7, 0x1a, 0x7c, 0x1a, 0xeb, 0x08, 0x1a, 0x49, 0x3b, 0x26, 0x37, 0xb5, 0x58, 0x67,
	0xb9, 0xbc, 0x6d, 0x67, 0x6d, 0x19, 0xaf, 0xd2, 0xca, 0x5f, 0xdf, 0x73, 0xdd, 0x18, 0x21, 0xaf,
	0xa1, 0x5d, 0xba, 0x14, 0x01, 0xb7, 0xe7, 0xb9, 0x22, 0x79, 0x60, 0x66, 0xec, 0x5a, 0xbb, 0xb5,
	0xb7, 0xae, 0x0f, 0x9c, 0x14, 0xbd, 0x0b, 0xed, 0x03, 0x64, 0x8e, 0xe4, 0x17, 0xb3, 0x74, 0x9a,
	0x1d, 0xe9, 0x54, 0xc5, 0xcf, 0x60, 0x63, 0x9a, 0xfc, 0x19, 0x96, 0x97, 0x4c, 0xdf, 0x5f, 0xfa,
	0xb5, 0xac, 0xff, 0x77, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0x28, 0x5d, 0x11, 0x68, 0xea, 0x0e,
	0x00, 0x00,
}
