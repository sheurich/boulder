// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/letsencrypt/boulder/core (interfaces: Publisher)

package mock_publisher

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// Mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *_MockPublisherRecorder
}

// Recorder for MockPublisher (not exported)
type _MockPublisherRecorder struct {
	mock *MockPublisher
}

func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &_MockPublisherRecorder{mock}
	return mock
}

func (_m *MockPublisher) EXPECT() *_MockPublisherRecorder {
	return _m.recorder
}

func (_m *MockPublisher) SubmitToCT(_param0 context.Context, _param1 []byte) error {
	ret := _m.ctrl.Call(_m, "SubmitToCT", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPublisherRecorder) SubmitToCT(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SubmitToCT", arg0, arg1)
}

func (_m *MockPublisher) SubmitToSingleCT(_param0 context.Context, _param1 string, _param2 string, _param3 []byte) error {
	ret := _m.ctrl.Call(_m, "SubmitToSingleCT", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPublisherRecorder) SubmitToSingleCT(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SubmitToSingleCT", arg0, arg1, arg2, arg3)
}
